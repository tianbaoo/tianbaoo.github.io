<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>天宝的博客</title>
    <link>http://tianbaoo.github.io/</link>
    <description>Recent content on 天宝的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 18 Jun 2021 00:13:27 +0000</lastBuildDate>
    
	<atom:link href="http://tianbaoo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang的GC机制</title>
      <link>http://tianbaoo.github.io/post/golangGC/</link>
      <pubDate>Mon, 22 Aug 2022 08:36:15 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/golangGC/</guid>
      <description>golang的三色标记和写屏障 无STW的三色标记 第一步 , 每次新创建的对象，默认的颜色都是标记为&amp;quot;白色&amp;rdquo; 第二步, 每次GC回收开始, 会从根节点开始遍历所有对象，把遍历到的对象从白色集合放入&amp;quot;灰色&amp;quot;集合 第三步, 遍历灰色集合，将灰色对象引用的对象</description>
    </item>
    
    <item>
      <title>Go泛型</title>
      <link>http://tianbaoo.github.io/post/GoGeneric/</link>
      <pubDate>Sat, 20 Aug 2022 09:33:25 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/GoGeneric/</guid>
      <description>Golang泛型知识点 1.声明泛型函数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 package main import ( &amp;#34;fmt&amp;#34; ) func printSlice[T any](s []T){ for _,v := range s{ fmt.Printf(&amp;#34;%v\n&amp;#34;,v) } } func main(){ // 使用泛型可以传入多种类型不同的参数，进行函数复用 printSlice[int]([]int{1,2,3,4,5}) printSlice[float64]([]float64{1.1,1.2,1.3}) printSlice[string]([]string{&amp;#34;hello&amp;#34;,&amp;#34;world&amp;#34;,&amp;#34;!&amp;#34;}) // 省略显示类型 省略显示[T any] printSlice([]int64{5,4,3,2,1}) } [T any]参数的类型，意思是该函数支持任何T类型 多个泛型参数语法 1</description>
    </item>
    
    <item>
      <title>MySQL知识点</title>
      <link>http://tianbaoo.github.io/post/MySQL/</link>
      <pubDate>Thu, 18 Aug 2022 10:32:35 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/MySQL/</guid>
      <description>MySQL知识点 引擎 innodb 引擎 默认事务型引擎，最重要最广泛的存储引擎，对主键查询的性能高，支持崩溃后的安全恢复 支持行级锁 支持外键 MyISAM 引擎 5.1 版本前是默认引擎 拥有全文索引、压缩、空间函数 不支持事务和行级锁，不支持奔溃后安全恢复 锁机制 当多个查询同一时刻进行数据修改时，会产生并发控制的问题 1. 共</description>
    </item>
    
    <item>
      <title>Redis知识点</title>
      <link>http://tianbaoo.github.io/post/Redis/</link>
      <pubDate>Wed, 17 Aug 2022 09:25:39 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/Redis/</guid>
      <description>缓存问题 1.缓存雪崩 定义：造成缓存雪崩的关键在于在同一时间大规模的key失效 原因：第一种可能是Redis宕机，第二种可能是采用了相同的过期时间 解决方法： 1.采用相同的过期时间导致的缓存雪崩，可以在原有的失效时间上加上一个随机值，比如1-5分钟随机 2.为了防止Redis宕机导致缓存</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://tianbaoo.github.io/about/</link>
      <pubDate>Fri, 18 Jun 2021 00:13:27 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/about/</guid>
      <description>2018.06~2020.04年 Python工程师 深圳市智网云联科技有限公司 云计算行业 2020.05~至今 高级Python工程师 深圳市创想三维科技股份有限公司 3D打印行业 邮箱: gtb365@163.com 微信号: GT_365</description>
    </item>
    
    <item>
      <title>Dockerfile--分段编译</title>
      <link>http://tianbaoo.github.io/post/Dockerfile-%E5%88%86%E6%AE%B5%E7%BC%96%E8%AF%91/</link>
      <pubDate>Mon, 15 Mar 2021 09:20:32 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/Dockerfile-%E5%88%86%E6%AE%B5%E7%BC%96%E8%AF%91/</guid>
      <description>Dockerfile&amp;ndash;分段编译 Dockerfile示例 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 FROM golang:1.16-alpine AS builder LABEL stage=gobuilder ENV CGO_ENABLED 0 ENV GOOS linux ENV GOPROXY https://goproxy.cn,direct RUN mkdir /server WORKDIR /server ADD go.mod . ADD go.sum . RUN go mod download COPY . . RUN go build -ldflags=&amp;#34;-s -w&amp;#34; -o /server/main ./main.go FROM alpine RUN apk update --no-cache &amp;amp;&amp;amp; apk add --no-cache ca-certificates tzdata ENV TZ Asia/Shanghai WORKDIR /server COPY --from=builder /server/main /server/main CMD [&amp;#34;./main&amp;#34;] 运行 1 2 docker build -t server_api:v1.0.2 . docker run -it --rm server_api:v1.0.2</description>
    </item>
    
    <item>
      <title>go--并发</title>
      <link>http://tianbaoo.github.io/post/go-%E5%B9%B6%E5%8F%91/</link>
      <pubDate>Thu, 11 Mar 2021 19:29:32 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E5%B9%B6%E5%8F%91/</guid>
      <description>go并发常用操作 启动多个goroutine 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) var wg sync.WaitGroup func hello(i int) { defer wg.Done() // goroutine结束就登记-1 fmt.Println(&amp;#34;hello&amp;#34;, i) } func main() { for i:= 0; i &amp;lt; 100; i++{ wg.Add(1) // 启动一个goroutine就登记+1 go hello(i) } wg.Wait() // 等待所有登记的goroutine都结束 } runtime包</description>
    </item>
    
    <item>
      <title>go--反射</title>
      <link>http://tianbaoo.github.io/post/go-%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Wed, 10 Mar 2021 18:28:34 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E5%8F%8D%E5%B0%84/</guid>
      <description>go的反射常用操作 变量内在机制 类型信息：预先定义好的元信息 值信息：程序运行过程中可动态变化的 reflect包提供了reflect.TypeOf和reflect.ValueOf两个函数来获取任意对象的Type和Value go的反射常用操作 reflect包 1 2 3 4 5 6 7 8 9 10 11 12 13 14</description>
    </item>
    
    <item>
      <title>go--结构体和interface</title>
      <link>http://tianbaoo.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93/</link>
      <pubDate>Wed, 10 Mar 2021 16:22:45 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E7%BB%93%E6%9E%84%E4%BD%93/</guid>
      <description>go的struct常用操作 struct常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 package main import &amp;#34;fmt&amp;#34; type Person struct { Name string Age int } func newPerson(name string, age int) *Person { // Go语言的结构体没有构造函数，我们可以</description>
    </item>
    
    <item>
      <title>go--map</title>
      <link>http://tianbaoo.github.io/post/go-map/</link>
      <pubDate>Tue, 09 Mar 2021 14:34:21 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-map/</guid>
      <description>go的map常用操作 map常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package main import &amp;#34;fmt&amp;#34; func ChangeMap(myMap map[string]string) { // map是引用传递 myMap[&amp;#34;name&amp;#34;] = &amp;#34;guo&amp;#34; } func main() { var myMap1 map[string]string // 在使用map前， 需要先用make给map分配数据空间 myMap1 = make(map[string]string, 10) myMap1[&amp;#34;name&amp;#34;] = &amp;#34;tianbao&amp;#34; fmt.Println(myMap1) // 输出：map[name:tianbao] ChangeMap(myMap1) fmt.Println(myMap1) // 输出：map[name:guo] }</description>
    </item>
    
    <item>
      <title>go--函数</title>
      <link>http://tianbaoo.github.io/post/go-%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 08 Mar 2021 13:49:56 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E5%87%BD%E6%95%B0/</guid>
      <description>go的函数常用操作 函数常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 package main import &amp;#34;fmt&amp;#34; func Add(a int, b int) (c int) { // 返回返回值， 有形参名称的, 直接return // go 不支持函数重载 不支持默认参数 c = a + b return } func main() { ret := Add(5, 7) fmt.Println(ret) }</description>
    </item>
    
    <item>
      <title>go--切片</title>
      <link>http://tianbaoo.github.io/post/go-%E5%88%87%E7%89%87/</link>
      <pubDate>Sun, 07 Mar 2021 12:19:23 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E5%88%87%E7%89%87/</guid>
      <description>go切片常用操作 切片常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 package main import ( &amp;#34;fmt&amp;#34; ) func main() { sli := []int{1,2,3,4,5} fmt.Println(sli) // 输出：[1 2 3 4 5] // append追加操作 sli = append(sli, 6) fmt.Println(sli) // 输出：[1 2 3 4 5 6] // 删除切片中的元素 i := 2 sli = append(sli[:i],</description>
    </item>
    
    <item>
      <title>go--字符串</title>
      <link>http://tianbaoo.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
      <pubDate>Sat, 06 Mar 2021 11:16:23 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
      <description>go操作字符串 字符串常用操作 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;unicode/utf8&amp;#34; ) func main() { s := &amp;#34;Hello Wo</description>
    </item>
    
    <item>
      <title>go--环境搭建</title>
      <link>http://tianbaoo.github.io/post/go-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Fri, 05 Mar 2021 10:26:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/go-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description>go环境搭建 环境搭建 1 2 3 4 5 6 7 8 9 10 11 wget https://studygolang.com/dl/golang/go1.17.4.linux-amd64.tar.gz sudo tar -xvf go1.17.4.linux-amd64.tar.gz sudo mv go /usr/local # 配置环境变量 vim ~/.bashrc 写入 export GOROOT=/usr/local/go #编译器路径 export GOPATH=$HOME/go #项目路径 export PATH=$GOPATH/bin:$GOROOT/bin:$PATH 保存后source ~/.bashrc go env -w GOPROXY=https://goproxy.cn,direct # 代理</description>
    </item>
    
    <item>
      <title>go常用命令行命令</title>
      <link>http://tianbaoo.github.io/post/goFast/</link>
      <pubDate>Sun, 19 Jul 2020 12:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/goFast/</guid>
      <description>安装工具 最简单的方式 1 $ go get -u golang.org/x/tool/... 替代方式 1 $ GO111MODULE=on go get golang.org/x/tool/cmd/stress 环境变量 1 2 3 4 $ go env $ go env GOPATH GOO GOARCH $ go env -w GOPROXY=https://goproxy.cn,direct $ go help environment 开发 运行代码 1 2 3 4 5 6 7 8 9 $ go run . # 运行当前目录的包 $ go run ./cmd/foo # 运行 ./cmd/foo 目录下的包 获取依赖 $ go get github.com/foo/bar@v1.2.3 $ go get github.com/foo/bar@8e1b8d3 $ go list -m all # 显示所有依赖 $ go mod why -m golang.org/x/y # 为什依赖它？ $ go clean -modcache # 清除模块缓</description>
    </item>
    
    <item>
      <title>Python协程&amp;asyncio&amp;异步编程</title>
      <link>http://tianbaoo.github.io/post/PyCoroutines/</link>
      <pubDate>Sat, 23 May 2020 11:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/PyCoroutines/</guid>
      <description>Python协程&amp;amp;asyncio&amp;amp;异步编程 1.协程 协程是微线程，是一种用户态上下文切换技术，通过一个线程实现代码块相互切换执行 实现协程有这么几种方法： greenlet，早期的模块 yield 关键字 asyncio python3.4引入的 async、await关键字 python3.5 主流[推荐] 1.1 gree</description>
    </item>
    
    <item>
      <title>封装的Redis队列</title>
      <link>http://tianbaoo.github.io/post/MyRedisQueue/</link>
      <pubDate>Thu, 20 Feb 2020 11:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/MyRedisQueue/</guid>
      <description>封装的Redis队列 MyRedisQueue.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #!usr/bin/env python2.7 # -*- coding: utf-8 -*- import redis class RedisQueue(object): def __init__(self, name, namespace=&amp;#39;queue&amp;#39;, **redis_kwargs): # redis的默认参数为：host=&amp;#39;localhost&amp;#39;, port=6379, db=0， 其中db为定义redis database的数量 #</description>
    </item>
    
    <item>
      <title>pyjsonrpc的使用</title>
      <link>http://tianbaoo.github.io/post/jsonrpc/</link>
      <pubDate>Wed, 19 Feb 2020 12:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/jsonrpc/</guid>
      <description>pyjsonrpc的使用 客户端 JsonRpcClient.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!usr/bin/env python2.7 # -*- coding: utf-8 -*- import ssl import socket import inspect import logging import pyjsonrpc try: ssl._create_default_https_context = ssl._create_unverified_context except Exception: pass logger = logging.getLogger(&amp;#39;blog&amp;#39;) def func(): # 获取当前函数名, 如果是类直接调用，则是类名 return inspect.stack()[1][3] class JsonRpcIF(object):</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>http://tianbaoo.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>http://tianbaoo.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>