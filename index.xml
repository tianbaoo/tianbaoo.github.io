<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>天宝的博客</title>
    <link>http://tianbaoo.github.io/</link>
    <description>Recent content on 天宝的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 18 Feb 2020 00:13:27 +0000</lastBuildDate>
    
	<atom:link href="http://tianbaoo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>go常用命令行命令</title>
      <link>http://tianbaoo.github.io/post/goFast/</link>
      <pubDate>Sun, 19 Jul 2020 12:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/goFast/</guid>
      <description>安装工具 最简单的方式 1 $ go get -u golang.org/x/tool/... 替代方式 1 $ GO111MODULE=on go get golang.org/x/tool/cmd/stress 环境变量 1 2 3 4 $ go env $ go env GOPATH GOO GOARCH $ go env -w GOPROXY=https://goproxy.cn,direct $ go help environment 开发 运行代码 1 2 3 4 5 6 7 8 9 $ go run . # 运行当前目录的包 $ go run ./cmd/foo # 运行 ./cmd/foo 目录下的包 获取依赖 $ go get github.com/foo/bar@v1.2.3 $ go get github.com/foo/bar@8e1b8d3 $ go list -m all # 显示所有依赖 $ go mod why -m golang.org/x/y # 为什依赖它？ $ go clean -modcache # 清除模块缓</description>
    </item>
    
    <item>
      <title>Python协程&amp;asyncio&amp;异步编程</title>
      <link>http://tianbaoo.github.io/post/PyCoroutines/</link>
      <pubDate>Sat, 23 May 2020 11:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/PyCoroutines/</guid>
      <description>Python协程&amp;amp;asyncio&amp;amp;异步编程 1.协程 协程是微线程，是一种用户态上下文切换技术，通过一个线程实现代码块相互切换执行 实现协程有这么几种方法： greenlet，早期的模块 yield 关键字 asyncio python3.4引入的 async、await关键字 python3.5 主流[推荐] 1.1 gree</description>
    </item>
    
    <item>
      <title>封装的Redis队列</title>
      <link>http://tianbaoo.github.io/post/MyRedisQueue/</link>
      <pubDate>Thu, 20 Feb 2020 11:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/MyRedisQueue/</guid>
      <description>封装的Redis队列 MyRedisQueue.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 #!usr/bin/env python2.7 # -*- coding: utf-8 -*- import redis class RedisQueue(object): def __init__(self, name, namespace=&amp;#39;queue&amp;#39;, **redis_kwargs): # redis的默认参数为：host=&amp;#39;localhost&amp;#39;, port=6379, db=0， 其中db为定义redis database的数量 #</description>
    </item>
    
    <item>
      <title>pyjsonrpc的使用</title>
      <link>http://tianbaoo.github.io/post/jsonrpc/</link>
      <pubDate>Wed, 19 Feb 2020 12:15:46 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/post/jsonrpc/</guid>
      <description>pyjsonrpc的使用 客户端 JsonRpcClient.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 #!usr/bin/env python2.7 # -*- coding: utf-8 -*- import ssl import socket import inspect import logging import pyjsonrpc try: ssl._create_default_https_context = ssl._create_unverified_context except Exception: pass logger = logging.getLogger(&amp;#39;blog&amp;#39;) def func(): # 获取当前函数名, 如果是类直接调用，则是类名 return inspect.stack()[1][3] class JsonRpcIF(object):</description>
    </item>
    
    <item>
      <title>关于我</title>
      <link>http://tianbaoo.github.io/about/</link>
      <pubDate>Tue, 18 Feb 2020 00:13:27 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/about/</guid>
      <description>2018.06~2020.04年 Python工程师 云计算行业 2020.05~至今 Python工程师 3D打印行业 邮箱: gtb365@163.com 微信号: GT_365</description>
    </item>
    
    <item>
      <title>归档</title>
      <link>http://tianbaoo.github.io/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title>搜索</title>
      <link>http://tianbaoo.github.io/search/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://tianbaoo.github.io/search/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>